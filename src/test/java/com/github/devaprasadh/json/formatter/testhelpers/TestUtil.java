package com.github.devaprasadh.json.formatter.testhelpers;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.PrintStream;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.logging.Level;
import java.util.logging.LogManager;
import java.util.logging.Logger;
import java.util.regex.Pattern;

import com.github.devaprasadh.json.formatter.helpers.Constants;

/**
 * Helper class for testing log formatting
 * 
 * @author Devaprasadh Xavier
 *
 */
public class TestUtil {
	public static final Pattern TIMESTAMP_PATTERN = Pattern
			.compile("[0-9]{4}-[0-9]{2}-[0-9]{2}T[0-9]{2}:[0-9]{2}:[0-9]{2}.[0-9]{3}-[0-9]{2}:[0-5]{1}[0-9]{1}");
	
	public static void loadLoggingConfig() {
		try (InputStream inputStream = TestUtil.class.getClassLoader()
				.getResourceAsStream("logging.properties");) {
			LogManager.getLogManager().readConfiguration(inputStream);
		} catch (IOException e) {
			Logger.getAnonymousLogger().severe("Could not load logging.properties file");
			Logger.getAnonymousLogger().severe(e.getMessage());
		}
	}
	
	/**
	 * Verifies the JSON generated by a simple log line without exception stack traces
	 * 
	 * @param jsonMap
	 * @param loggerName
	 * @param message
	 * @param logLevel
	 */
	public static void verifyJson(Map<String, Object> jsonMap, String loggerName, String message, String logLevel) {
		assertNotNull(jsonMap.get(Constants.KEY_TIMESTAMP));
		assertTrue(TestUtil.TIMESTAMP_PATTERN.matcher(jsonMap.get(Constants.KEY_TIMESTAMP).toString()).matches());
		assertEquals(loggerName, jsonMap.get(Constants.KEY_LOGGER_NAME));
		assertEquals(logLevel, jsonMap.get(Constants.KEY_LOG_LEVEL));
		assertNotNull(jsonMap.get(Constants.KEY_THREAD_NAME));
		assertEquals(message, jsonMap.get(Constants.KEY_MESSAGE));
	}
	
	/**
	 * Captures console output into a stream
	 * 
	 * @return {@code ByteArrayOutputStream}
	 */
	public static ByteArrayOutputStream captureConsole() {
		final ByteArrayOutputStream outputStream = new ByteArrayOutputStream();
		System.setErr(new PrintStream(outputStream));

		return outputStream;
	}

	/**
	 * Logs a set of messages using the logger that is provided as input
	 * 
	 * @param logger
	 * @throws InterruptedException
	 * @throws ExecutionException
	 */
	public static void logMessages(Logger logger) throws InterruptedException, ExecutionException {
		// Message with exception object without exception message
		logger.log(Level.SEVERE, "Test message with exception", new RuntimeException());

		// Message with exception object with exception message
		logger.log(Level.SEVERE, "Test message with exception", new RuntimeException("test exception"));
	}
}
